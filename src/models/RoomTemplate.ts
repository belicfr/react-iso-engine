import {Coord2D} from "../game/room-view/engine/precepts/Coord2D.ts";

export class RoomTemplateRepository {
  static instance: RoomTemplateRepository;

  templates: RoomTemplate[];

  constructor() {
    this.templates = [
      new RoomTemplate(1, `
000000000000000000000000000000000000
000000000000000000000000000000000000
011111111000000000000000000000000000
011111111000000000000000000000000000
011111111000000000000000000000000000
011111111000000000000000000000000000
011111111000000000000000000000000000
011111111000000000000000000000000000
011111111000000111111111100000000000
011111111000000111111111100000000000
011111111000000111111111100000000000
011111111000000111111111100000000000
011111111000000111111111100000000000
011111111000000111111111100000000000
000000000000000111111111100000000000
000000000000000111111111100000000000
000000000000000111111111100000000000
000000000000000111111111100000000000
000001000000000111111111100000000000
000000000000000111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000011111111111111111100000000000
000000000000000111000000000000000000
0000000000000001E1000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000001000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
000000000000000000000000000000000000
        `.trim(), "Lounge"),
      new RoomTemplate(2, `
0000000000000000000000000000000000000
0000000000000000000000000000000000000
0000000000000000000000000000000000000
0000000000000000000000000000000000000
0000000000000000000000000000000000000
0000000000000000000000000000000000000
0000000000011000000000000000000000000
0000000000111100000000000000000000000
000000000E111110000000001111111111000
0000000011111111000000011111111111000
0000000111111111100000111111111111000
0000000111111111111001111111111111000
0000000011111111111111111111111111000
0000000001111111111111111111111111000
0000000000111111111111111111111111000
0000000000011111111111111111111111000
0000000000001111111111111111111111000
0000000000001111111111111111111111000
0000000000001111111111111111111111000
0000000000001111111111111111111111000
0000000000001111111111111111111111000
0000000000011111111111111111111110000
0000000000111111111111111111111100000
0000000001111111111111111111111000000
0000000001111111111111111111110000000
0000000001111111111111111111100000000
0000000001111111111111111111000000000
0000000001111111111111111110000000000
0000000001111111111111111100000000000
0000100001111111111111111000000000000
0000000001111111111111110000000000000
0000000001111111111111100000000000000
0000000001111111111111000000000000000
0000000000000000000000000000000000000
0000000000000000000000000000000000000
        `.trim(), "Theater"),
    ];
  }

  findById(id: number): RoomTemplate|null {
    return this.templates.find(template => template.id === id)
      ?? null;
  }


  static i(): RoomTemplateRepository {
    if (!RoomTemplateRepository.instance) {
      RoomTemplateRepository.instance = new RoomTemplateRepository();
    }

    return RoomTemplateRepository.instance;
  };
}

export default class RoomTemplate {
  id: number;
  template: string;
  name: string;

  constructor(id: number, template: string, name: string) {
    this.id = id;
    this.template = template;
    this.name = name;

    this.tilesCount();
  }

  generate(): TileSituation[] {
    const rows: string[] = this
      .template
      .split('\n')
      .map(row => row.trim());

    const tilesPositions: TileSituation[] = [];

    let row: string;
    let tilesDigits: string[];
    let tileDigit: string;

    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {
      row = rows[rowIndex];
      tilesDigits = row.split('');

      for (let tileDigitIndex = 0; tileDigitIndex < tilesDigits.length; tileDigitIndex++) {
        tileDigit = tilesDigits[tileDigitIndex];

        if (tileDigit !== TileDigit.VOID) {
          tilesPositions.push({
            x: rowIndex,
            y: tileDigitIndex,
            isEntrance: tileDigit === TileDigit.ENTRANCE,
          });
        }
      }
    }

    return tilesPositions;
  };

  tilesCount(): number {
    const tilesDigits
      = this.template.search(/[1-9]+/g);

    console.log(tilesDigits);

    return tilesDigits;
  };
};

export type TileSituation = Coord2D & {
  isEntrance: boolean,
};

enum TileDigit {
  VOID = "0",
  ENTRANCE = "E",
}